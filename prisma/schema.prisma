// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id        Int       @id @default(autoincrement())
    fullName  String
    email     String    @unique
    password  String
    avatar    String?
    roleId    Int
    role      Role      @relation(fields: [roleId], references: [id])
    isActive  Boolean   @default(true)
    createdBy Int? // user ID of creator (admin)
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    isDeleted Boolean   @default(false)
    deletedAt DateTime?

    modulePermissions UserModulePermission[]
    Chat              Chat[]
    providedTasks     Task[]                 @relation("UserProvidedTasks")
    solvedTasks       Task[]                 @relation("UserSolvedTasks")
    Meeting           Meeting[]

    @@index([email])
    @@map("users")
}

model Role {
    id        Int       @id @default(autoincrement())
    name      String
    slug      String    @unique
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    isDeleted Boolean   @default(false)
    deletedAt DateTime?

    users User[]

    @@map("roles")
}

model Permission {
    id        Int       @id @default(autoincrement())
    name      String
    slug      String    @unique
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    isDeleted Boolean   @default(false)
    deletedAt DateTime?

    modulePermissions UserModulePermission[]

    @@map("permissions")
}

model Module {
    id        Int       @id @default(autoincrement())
    name      String
    slug      String    @unique
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    isDeleted Boolean   @default(false)
    deletedAt DateTime?

    modulePermissions UserModulePermission[]

    @@map("modules")
}

model UserModulePermission {
    id           Int @id @default(autoincrement())
    userId       Int
    moduleId     Int
    permissionId Int

    user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    module     Module     @relation(fields: [moduleId], references: [id], onDelete: Cascade)
    permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    isDeleted Boolean   @default(false)
    deletedAt DateTime?

    @@map("user_module_permissions")
}

model Client {
    id              Int               @id @default(autoincrement())
    shopDomain      String            @unique
    email           String
    shopName        String?
    Chat            Chat[]
    ClientEmail     ClientEmail[]
    Task            Task[]
    MarketingFunnel MarketingFunnel[]

    @@index([shopDomain, email])
    @@map("clients")
}

model Status {
    id        Int       @id @default(autoincrement())
    name      String
    slug      String    @unique
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    isDeleted Boolean   @default(false)
    deletedAt DateTime?

    @@map("statuses")
}

model Chat {
    id                 Int          @id @default(autoincrement())
    clientId           Int
    clientQuery        String       @db.Text
    handleBy           Int
    chatDate           DateTime?
    chatTranscript     String?      @db.Text
    reviewAsked        Boolean      @default(false)
    reviewStatus       Boolean      @default(false)
    reviewText         String?      @db.Text
    lastReviewApproach DateTime?
    clientFeedback     String?      @db.Text
    storeDetails       String?      @db.Text
    featureRequest     String?      @db.Text
    agentRating        Int?
    agentComments      String?      @db.Text
    otherStoresUrl     String?      @db.Text
    changesMadeByAgent String?      @db.Text
    isDeleted          Boolean      @default(false)
    deletedAt          DateTime?
    createdAt          DateTime     @default(now())
    updatedAt          DateTime     @updatedAt

    handleByUser User      @relation(fields: [handleBy], references: [id])
    client       Client    @relation(fields: [clientId], references: [id])
    chatTags     ChatTag[]

    @@map("chats")
}

model Tag {
    id        Int      @id @default(autoincrement())
    name      String   @unique
    createdAt DateTime @default(now())

    chatTags ChatTag[]
}

model ChatTag {
    chatId Int
    tagId  Int

    chat Chat @relation(fields: [chatId], references: [id])
    tag  Tag  @relation(fields: [tagId], references: [id])

    @@id([chatId, tagId])
    @@map("chat_tags")
}

model ClientEmail {
    id        Int       @id @default(autoincrement())
    clientId  Int
    email     String    @unique
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    isDeleted Boolean   @default(false)
    deletedAt DateTime?

    client Client @relation(fields: [clientId], references: [id])

    @@map("client_emails")
}

model Task {
    id            Int       @id @default(autoincrement())
    clientId      Int
    providedBy    Int
    solvedBy      Int?
    taskDetails   String    @db.Text
    taskStatus    String?
    storePassword String?
    storeAccess   String?
    taskAddedDate DateTime?
    reply         String?   @db.Text
    comments      String?   @db.Text
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    isDeleted     Boolean   @default(false)
    deletedAt     DateTime?

    // Relations
    client         Client @relation(fields: [clientId], references: [id])
    providedByUser User   @relation("UserProvidedTasks", fields: [providedBy], references: [id])
    solvedByUser   User?  @relation("UserSolvedTasks", fields: [solvedBy], references: [id])

    @@map("tasks")
}

model Meeting {
    id                Int       @id @default(autoincrement())
    agentId           Int
    storeUrl          String    @db.Text
    isExternalMeeting Boolean?  @default(false)
    meetingDetails    String?   @db.Text
    meetingDateTime   DateTime
    reviewAsked       Boolean?  @default(false)
    reviewGiven       Boolean?  @default(false)
    reviewDate        DateTime?
    reviewsInfo       String?   @db.Text
    joiningStatus     Boolean?  @default(false)
    recordedVideo     String?   @db.Text
    meetingNotes      String?   @db.Text
    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt
    isDeleted         Boolean   @default(false)
    deletedAt         DateTime?

    // Each meeting can have multiple associated emails
    emails MeetingEmail[]

    // Relations
    user User @relation(fields: [agentId], references: [id])

    @@map("meetings")
}

model MeetingEmail {
    id        Int       @id @default(autoincrement())
    email     String
    meetingId Int
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    isDeleted Boolean   @default(false)
    deletedAt DateTime?

    meeting Meeting @relation(fields: [meetingId], references: [id])

    @@unique([meetingId, email]) // prevents duplicate emails per meeting
    @@map("meeting_emails")
}

model MarketingFunnel {
    id                  Int       @id @default(autoincrement())
    clientId            Int
    installPhase        String
    typeOfProducts      String
    otherAppsInstalled  String?
    customizationType   String?
    initialFeedback     String?   @db.Text
    clientSuccessStatus String
    createdAt           DateTime  @default(now())
    updatedAt           DateTime  @updatedAt
    isDeleted           Boolean   @default(false)
    deletedAt           DateTime?

    client    Client     @relation(fields: [clientId], references: [id])
    followUps FollowUp[]

    @@map("marketing_funnels")
}

model FollowUp {
    id                Int       @id @default(autoincrement())
    marketingFunnelId Int
    followUpDate      DateTime
    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt
    isDeleted         Boolean   @default(false)
    deletedAt         DateTime?

    marketingFunnel MarketingFunnel @relation(fields: [marketingFunnelId], references: [id])

    @@map("follow_ups")
}
