// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id        Int       @id @default(autoincrement())
    fullName  String
    email     String    @unique
    password  String
    avatar    String?
    roleId    Int
    role      Role      @relation(fields: [roleId], references: [id])
    isActive  Boolean   @default(true)
    createdBy Int? // user ID of creator (admin)
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    isDeleted Boolean   @default(false)
    deletedAt DateTime?

    modulePermissions UserModulePermission[]
    Chat              Chat[]

    @@index([email])
    @@map("users")
}

model Role {
    id        Int       @id @default(autoincrement())
    name      String
    slug      String    @unique
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    isDeleted Boolean   @default(false)
    deletedAt DateTime?

    users User[]

    @@map("roles")
}

model Permission {
    id        Int       @id @default(autoincrement())
    name      String
    slug      String    @unique
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    isDeleted Boolean   @default(false)
    deletedAt DateTime?

    modulePermissions UserModulePermission[]

    @@map("permissions")
}

model Module {
    id        Int       @id @default(autoincrement())
    name      String
    slug      String    @unique
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    isDeleted Boolean   @default(false)
    deletedAt DateTime?

    modulePermissions UserModulePermission[]

    @@map("modules")
}

model UserModulePermission {
    id           Int @id @default(autoincrement())
    userId       Int
    moduleId     Int
    permissionId Int

    user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    module     Module     @relation(fields: [moduleId], references: [id], onDelete: Cascade)
    permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    isDeleted Boolean   @default(false)
    deletedAt DateTime?

    @@map("user_module_permissions")
}

model Client {
    id            Int           @id @default(autoincrement())
    shopDomain    String        @unique
    email         String?
    shopName      String
    accessToken   String
    planName      String?
    country       String?
    currency      String?
    timezone      String?
    installedAt   DateTime      @default(now())
    uninstalledAt DateTime?
    status        StoreStatus   @default(ACTIVE)
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    isDeleted     Boolean       @default(false)
    deletedAt     DateTime?
    Chat          Chat[]
    ClientEmail   ClientEmail[]

    @@index([shopDomain, email])
    @@map("clients")
}

enum StoreStatus {
    ACTIVE
    UNINSTALLED
    SUSPENDED
}

model Status {
    id        Int       @id @default(autoincrement())
    name      String
    slug      String    @unique
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    isDeleted Boolean   @default(false)
    deletedAt DateTime?

    @@map("statuses")
}

model Chat {
    id                 Int       @id @default(autoincrement())
    clientId           Int
    clientQuery        String
    handleBy           Int
    chatDate           DateTime?
    chatTranscript     String?
    reviewAsked        Boolean
    reviewStatus       Boolean
    reviewText         String?
    lastReviewApproach DateTime?
    clientFeedback     String?
    storeDetails       String?
    featureRequest     String?
    agentRating        Int?
    agentComments      String?
    otherStoresUrl     String?
    createdAt          DateTime  @default(now())
    updatedAt          DateTime  @updatedAt
    isDeleted          Boolean   @default(false)
    deletedAt          DateTime?

    // relations
    handleByUser User   @relation(fields: [handleBy], references: [id])
    client       Client @relation(fields: [clientId], references: [id])

    @@map("chats")
}

model ClientEmail {
    id        Int       @id @default(autoincrement())
    clientId  Int
    email     String    @unique
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    isDeleted Boolean   @default(false)
    deletedAt DateTime?

    client Client @relation(fields: [clientId], references: [id])

    @@map("client_emails")
}
