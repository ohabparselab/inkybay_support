// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  fullName    String
  email       String    @unique
  password    String
  avatar      String?
  roleId      Int
  role        Role     @relation(fields: [roleId], references: [id])
  isActive    Boolean   @default(true)
  createdBy   Int?   // user ID of creator (admin)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime? 

  modulePermissions UserModulePermission[]

  @@index([email])
  @@map("users")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime? 

  users       User[]
  @@map("roles")
}

model Permission {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime?

  modulePermissions UserModulePermission[]

  @@map("permissions")
}

model Module {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime?

  modulePermissions UserModulePermission[]

  @@map("modules")
}

model UserModulePermission {
  id            Int      @id @default(autoincrement())
  userId        Int
  moduleId      Int
  permissionId  Int

  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  module        Module      @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  permission    Permission  @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  isDeleted     Boolean     @default(false)
  deletedAt     DateTime?

  @@map("user_module_permissions")
}
